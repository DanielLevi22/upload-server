name: widget-server pipe ECR
on:
  pull_request:
    branches:
      - master
    types: [opened, reopened, labeled, unlabeled, synchronize]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Configure Node.js
        id: configure-nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22
      
      -  name: Install pnpm
         id: install-pnpm
         uses: pnpm/action-setup@v4
         with:
            version: 10.6.4

      - name: Install dependencies
        id: install-dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure AWS Credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ vars.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        id: setup-docker-buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Generate tag
        id: generate-tags
        run: |
         SHA=$(echo $GITHUB_SHA | head -c7)
         echo "sha=$SHA" >> $GITHUB_OUTPUT


      - name: Build and export image
        id: build-and-export-image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          cache-from: type=gha
          cache-to: type=gha, mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:test

      - name: Run Trivy vulnerability scanner
        id: run-trivy-scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
           image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:test'
           format: 'table'
           ignore-unfixed: true
           vuln-type: 'os,library'
           severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          context: .
          push: true
          tags: |
             ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tags.outputs.sha }}
        
      # - name: Build and push Docker image to AWS ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      #     IMAGE_TAG: ${{ steps.generate-tags.outputs.sha }}
      #   id: build-and-push-image
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Deploy to App Runner
      #   id: deploy-to-app-runner
      #   uses: awslabs/amazon-app-runner-deploy@main  
      #   with:
      #     service: ${{ vars.APP_RUNNER_SERVICE_NAME }}
      #     image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tags.outputs.sha }}
      #     region: ${{ vars.AWS_REGION }}
      #     access-role-arn: ${{ secrets.ROLE_ARN}}
      #     cpu: ${{ vars.CPU }}
      #     memory: ${{ vars.MEMORY }}
      #     port: 3333
      #     wait-for-service-stability-seconds: 180

      # - name: App Runner Check
      #   id: app-runner-check
      #   run: echo "App Runner running ... ${{ steps.deploy-to-app-runner.outputs.app-runner-url }}"
      - name: Render Amazon ECS task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          container-name:  ${{ vars.CONTAINER_NAME }}
          task-definition: .aws/task-definition.json
          image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tags.outputs.sha }}
        

      - name: Deploy to Amazon ECS service
        id: deploy-to-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ vars.SERVICE_NAME }}
          cluster: upload-widget-server-ecs 
          wait-for-service-stability: true


