name: widget-server pipe ECR
on:
  pull_request:
    branches:
      - master
    types: [opened, reopened, labeled, unlabeled, synchronize]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Node.js
        id: configure-nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22
      
      - name: Install pnpm
        id: install-pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.6.4

      - name: Install dependencies
        id: install-dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure AWS Credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        id: setup-docker-buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Generate tag
        id: generate-tags
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Build and export image for scanning
        id: build-and-export-image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            widget-server:test  # Tag local, sem referência ao ECR
          platforms: linux/amd64

      - name: Debug local images after build
        run: |
          echo "Imagens locais após build para escaneamento:"
          docker images

      - name: Run Trivy vulnerability scanner
        id: run-trivy-scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: 'widget-server:test'  # Escaneia a imagem local
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Build and push to ECR
        id: build-and-push
        if: success()
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=gha
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tags.outputs.sha }}
          platforms: linux/amd64

      - name: Debug ECR images after push
        run: |
          echo "Imagens no ECR após push:"
          aws ecr describe-images --repository-name ${{ vars.ECR_REPOSITORY }} --region ${{ vars.AWS_REGION }} --query 'imageDetails[*].[imageDigest,imageTags,imagePushedAt,imageSizeInBytes]' --output table