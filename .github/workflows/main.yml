name: widget-server pipe ECR
on:
  pull_request:
    branches:
      - master
    types: [opened, reopened, labeled, unlabeled, synchronize]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Configure Node.js
        id: configure-nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22
      
      -  name: Install pnpm
         id: install-pnpm
         uses: pnpm/action-setup@v4
         with:
            version: 10.6.4

      - name: Install dependencies
        id: install-dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure AWS Credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ vars.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Generate tag
        id: generate-tags
        run: |
         SHA=$(echo $GITHUB_SHA | head -c7)
         echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
             ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tags.outputs.sha }}
        
      # - name: Build and push Docker image to AWS ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      #     IMAGE_TAG: ${{ steps.generate-tags.outputs.sha }}
      #   id: build-and-push-image
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      